{"version":3,"file":"static/js/797.8c511bd7.chunk.js","mappings":"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","sources":["webpack://itkamasutra/./src/components/Common/Inputs/FormControl.module.css?c1da","components/Common/Inputs/FormControl.jsx","components/Common/Inputs/Input.jsx","webpack://itkamasutra/./src/components/Common/ValidationErrors.module.css?ba51","components/Common/ValidationErrors.jsx","components/Login/Login.jsx","utils/helpers/validatorMiddleware.js","utils/validators/requiredValidation.js","utils/validators/textLengthValidation.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControl_formControl__GJ1Si\",\"error\":\"FormControl_error__ERU1W\"};","import cssModule from \"./FormControl.module.css\";\r\nimport {ValidationErrors} from \"../ValidationErrors\";\r\n\r\nconst FormControl = ({field, form: { touched, errors }, ...props}) => {\r\n    let isErrorsDefined =  Object.keys(errors).length !== 0;\r\n    let isTouchDefined = Object.keys(touched).length !== 0;\r\n    let isFieldWithErrors = false;\r\n\r\n    if(isErrorsDefined) {\r\n        let isErrorDefinedInCurrentComponent =  typeof errors[field.name] !== typeof undefined;\r\n        if(isErrorDefinedInCurrentComponent)\r\n        {\r\n            if(isTouchDefined)\r\n            {\r\n                let isTouchDefinedInCurrentComponent =  typeof touched[field.name] !== typeof undefined;\r\n                if(isTouchDefinedInCurrentComponent)\r\n                    isFieldWithErrors =  Object.keys(errors[field.name]).length !== 0 ;\r\n            }\r\n        }\r\n\r\n    }\r\n    let style = isFieldWithErrors ? `${cssModule.formControl} ${cssModule.error}` :`${cssModule.formControl}`;\r\n    return (\r\n        <div className={style}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            { isFieldWithErrors && <ValidationErrors errors={errors[field.name]}/>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormControl;","import cssModule from \"./Input.module.css\"\r\nimport FormControl from \"./FormControl\";\r\nimport {useState} from \"react\";\r\nconst Input = (props)  => {\r\n    return (\r\n        <FormControl {...props}>\r\n            <input  {...props.field} {...props}/>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"errorMessage\":\"ValidationErrors_errorMessage__xhD88\"};","import cssModule from \"./ValidationErrors.module.css\"\r\nexport const ValidationErrors = ({errors}) => {\r\n\r\n    let arrayOfErrorsText = [];\r\n    for (let error in errors)\r\n    {\r\n        arrayOfErrorsText.push(errors[error]);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n          {\r\n              arrayOfErrorsText.map(x => {\r\n                  return (\r\n                      <div key={x} className={cssModule.errorMessage}>\r\n                        {x}\r\n                      </div>\r\n                  );\r\n              })\r\n          }\r\n      </div>\r\n    );\r\n};","import {Formik, Field, Form} from \"formik\";\r\nimport Input from \"../Common/Inputs/Input\";\r\nimport {validatorMiddleware} from \"../../utils/helpers/validatorMiddleware\";\r\nimport {requiredValidator} from \"../../utils/validators/requiredValidation\";\r\nimport {maxLengthValidator} from \"../../utils/validators/textLengthValidation\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginCredentialsThunkCreator} from \"../../redux/authReducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {ValidationErrors} from \"../Common/ValidationErrors\";\r\n\r\nlet maxva50 = maxLengthValidator(50);\r\nlet full = [requiredValidator,maxva50];\r\n\r\nconst LoginForm = ({captcha,...props}) => {\r\n    return (\r\n        <Formik initialValues={{email:\"\", password:\"\", rememberMe:false}} onSubmit = {(values, submitProps) =>\r\n        {\r\n            props.loginCredentialsThunkCreator(values.email,values.password,values.rememberMe, values.captcha, submitProps.setErrors);\r\n            submitProps.resetForm();\r\n        }\r\n        }>\r\n            { (props) => (\r\n                    <Form>\r\n                        <Field placeholder=\"email\"\r\n                               type=\"email\"\r\n                               name=\"email\"\r\n                               component={Input}\r\n                               validate={validatorMiddleware(full)}/>\r\n                        <Field placeholder=\"password\"\r\n                               type=\"password\"\r\n                               name=\"password\"\r\n                               component={Input}\r\n                               validate={validatorMiddleware(full)}/>\r\n                        <Field component={Input}\r\n                               name=\"rememberMe\"\r\n                               type=\"checkbox\"/> remember me\r\n                        <button type=\"submit\">login</button>\r\n\r\n                        {\r\n                            captcha && <img src={captcha}/>\r\n                        }\r\n                        {\r\n                            captcha &&  <Field placeholder=\"captcha\"\r\n                                               type=\"captcha\"\r\n                                               name=\"captcha\"\r\n                                               component={Input}\r\n                                               validate={validatorMiddleware(full)}/>\r\n                        }\r\n                        {\r\n                            !props.errors.apiErrors ? <></> : <ValidationErrors errors={props.errors}/>\r\n                        }\r\n                    </Form>\r\n                )\r\n            }\r\n        </Formik>\r\n    );\r\n};\r\nconst Login = (props) => {\r\n\r\n    if(props.isAuth){\r\n        return <Navigate to={\"/profile\"} />\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginForm loginCredentialsThunkCreator={props.loginCredentialsThunkCreator} captcha={props.captchaUrl}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth : state.auth.isAuthorized,\r\n        captchaUrl: state.auth.captchaUrl,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {loginCredentialsThunkCreator})(Login);","export const validatorMiddleware = (validators) => {\r\n    return (value) => {\r\n        let errors = {};\r\n        for (let i = 0; i < validators.length; i++) {\r\n            let validateResult = validators[i](value);\r\n            if (validateResult) {\r\n                let validateResultTrimmed = validateResult.split(' ').join('');\r\n                errors[validateResultTrimmed] = validateResult;\r\n            }\r\n        }\r\n        return Object.keys(errors).length > 0 ? errors : undefined;\r\n    }\r\n}","export const requiredValidator = (value) => {\r\n    if(!value)\r\n        return \"Value is required\";\r\n\r\n    return undefined;\r\n}","\r\nexport const maxLengthValidator = (maxLength) => {\r\n    return (text) => {\r\n        if(text.length > maxLength)\r\n            return `Max length is ${maxLength} symbols`\r\n        return undefined;\r\n    }\r\n}\r\n"],"names":["_ref","field","_ref$form","form","touched","errors","props","_objectWithoutProperties","_excluded","isErrorsDefined","Object","keys","length","isTouchDefined","isFieldWithErrors","name","style","concat","cssModule","_jsxs","className","children","_jsx","ValidationErrors","FormControl","_objectSpread","arrayOfErrorsText","error","push","map","x","maxva50","maxLengthValidator","full","requiredValidator","LoginForm","captcha","Formik","initialValues","email","password","rememberMe","onSubmit","values","submitProps","loginCredentialsThunkCreator","setErrors","resetForm","Form","Field","placeholder","type","component","Input","validate","validatorMiddleware","src","apiErrors","_Fragment","connect","state","isAuth","auth","isAuthorized","captchaUrl","Navigate","to","validators","value","i","validateResult","split","join","undefined","maxLength","text"],"sourceRoot":""}